#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 19 16:08:21 2023

@author: jennywhiteley

Code modified by Gabe Decker from Jenny's code which originally plotted one day's total power values.
"""

# Code to take the txt files generated by running the ' Power_w_time.py' code that 
#are stored in the day folder and graphs the total power for every 
#half-hour of avaliable data. Code outputs a png graph for each day 
# listed in the months 'day.txt' file and locates these graphs in 
#the monthyear folder.

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from os.path import exists


mainpath = '.' 

months = ['June'] #['April', 'May', 'June', 'July', 'August', 'September'] # ['April', 'May'] #For month folder names
mons = ['Jun'] #['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'] #['Apr'] #Abbreviated version is needed as its used in day folders
years = ['2020'] #['2017', '2018', '2019', '2020']


for i in range(np.size(years)): # code going into each year folder
    year = years[i]
    if year == '2020': # Color coding the years
        color = 'blue'
    elif year =='2019':
        color = 'turquoise'
    elif year =='2018':
        color ='darkmagenta'
    elif year == '2017':
        color = 'palevioletred'

    print(year)
    for i in range(np.size(months)): # once inside the year, going into each month folder
        month = months[i]
        mon = mons[i]
        print(month)
        path = mainpath +f'/{year}/{month}{year}/' 

        daypath = path + 'days.txt'  # path to get to the days.txt file
        with open(daypath, 'r') as dayfile:   # opens the days.txt file to get days with data                .
                                              #within each month, also the names of the next 
                                              # layer of folders

            days =[]
            for line in dayfile:
                if line[0] != '#':
                    if line.rstrip() != mon: # takes away the \n, 
                        justday = []
                        a =  mon+line.rstrip()    #a and b are used because I ran out of meaningful names
                        b = a.replace(" ","_",1) #this replace is necessary as the txt file has whitespace
                        entry = b.replace(" ","-",1) #where the folders have _ and -'s
                        days.append(entry)

            for i in range(len(days)):
                date, sep, nix = days[i].partition('_')

                date2 = date + '_'
                justday.append(date2)


                    #the days.txt  is closed, so we're using the 'days' list to get 
                    #to the power and time logs for each day

        all_month_times = np.array([])
        all_month_powers = np.array([])
        for n in range(0,len(days)): 

            day = days[n]
            filethere = mainpath+f'/{year}/{month}{year}/{day}/'\

            file0 = filethere +  'TempOH0_TOTAL.csv' 
            file1 = filethere + 'TempOH1_TOTAL.csv'
            onlyday = justday[n]
            dayfolder = path+f'{day}'
            power = dayfolder + '/T_and_power.txt'

            if exists(file0) == True and exists(file1) == True:
                powr = np.loadtxt(power) #opens the files in a np, index-able array 6 column array,
                # 0-year 1-month 2-day 3-time in decimal hour
                # 4- power value(x) 5-exponent(y) of power in base 10(power)
                lp = len(powr)
                all_month_times = np.append(all_month_times, (powr[:,2]+(powr[:,3] / 24))) 
                # TODO: change above to add a fraction of 24 hours to the day
                all_month_powers = np.append(all_month_powers, (powr[0:lp,4]))

        # TODO: Continue here to plot only after gathering the month's data
        f = plt.figure(figsize=(14,10))
        #f.set_figwidth(7)
        plt.plot(all_month_times, all_month_powers, marker = '.',linestyle = 'solid', markersize = 5,\
                  color = f'{color}' )

        plt.title(f'Total Power {month}')
        plt.ylabel('Total power')
        #plt.ylim([0*10**(-5),3.5*10**(-5)]) #All plots will have same scales
        plt.xlabel('Day')
        #plt.xlim(0,24)

        graphlocation = path + f'{mon}Totpowr.png' #gives the location to save graph
        plt.show()
print('Finis')
